using System.IO;
using Autofac;
using Microsoft.Build.Framework;

namespace Soft.Example.Test.Autofac._2_RegisteringComponents
{
    public class ReflectionComponents
    {
        public void RegisterByType()
        {
            //Components generated by reflection are typically registered by type:
            var builder = new ContainerBuilder();
            builder.RegisterType<ConsoleLogger>();
            builder.RegisterType(typeof (ConfigReader));
        }

        //Cuando se usa reflection basado en componentes. Autofac automaticamente usa un constructor con con la 
        //mayor cantidad de parametros que se encuentre registrado en el conteiner

        public void RegisterByComponent()
        {
            var builder = new ContainerBuilder();
            builder.RegisterType<MyComponent>();
            builder.RegisterType<ConsoleLogger>().As<ILogger>();
            var container = builder.Build();

            using (var scope = container.BeginLifetimeScope())
            {
                var component = container.Resolve<MyComponent>(); //Eligio el segundo constructor 
            }

            //nota cuando se registra con RegisterType debe ser un tipo concreto una clase deribada.
            //No un abstracto o interfaz
        }

        public void SpecifyingAConstructor()
        {
            var builder = new ContainerBuilder();
            builder.RegisterType<ConsoleLogger>().As<ILogger>();
            builder.RegisterType<ConsoleLogger>().As<IConfigReader>(); // la idea es q sera implementacion
            builder.RegisterType<MyComponent>().UsingConstructor(typeof (ILogger), typeof (IConfigReader));
        }

        public void InstanceComponents()
        {
            //Cuando se quiera PRE GENERAR una instancia de un objeto y agregar al container para usarlo como 
            //un componente registrado se debe hacer registrando la instancia RegisterInstance
            var builder = new ContainerBuilder();
            var output = new StringWriter();
            builder.RegisterInstance(output).As<TextWriter>();

            builder.RegisterInstance(output)
                .As<TextWriter>()
                .ExternallyOwned(); //No llama al dispose 

            //builder.RegisterInstance(MySingleton.Instance).ExternallyOwned();

        }

        #region Nested Class and Interface

        public class MyComponent
        {
            public MyComponent()
            {
                /* ... */
            }

            public MyComponent(ILogger logger)
            {
                /* ... */
            }

            public MyComponent(ILogger logger, IConfigReader reader)
            {
                /* ... */
            }
        }

        public class ConsoleLogger
        {
        }

        public interface IConfigReader
        {
        }

        #endregion
    }

    #region New Type

    public class ConfigReader
    {
    }

    #endregion
}